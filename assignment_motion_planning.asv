a_1 = 2;
a_2 = 2;
T = 2;

points = [2 3; 1 1; 3 2; 3 1];

theta_1_last = pi/2;
theta_2_last = 0;
figure(1)
hold on;
grid on;
xlabel('X-axis');
ylabel('Y-axis');
title('Theta Angles Over Points');
legend('theta_1','theta_2')

figure(2)
hold on;
grid on;
xlabel('X-axis');
ylabel('Y-axis');
title('Theta Angle Velocities Over Points');
legend('v_theta_1','v_theta_2')

figure(3)
hold on;
grid on;
xlabel('X-axis');
ylabel('Y-axis');
title('End effector position');
xlim([0 4]);
ylim([0 4]);
plot([0 a_1.*cos(theta_1_last)], [0 a_1.*sin(theta_1_last)])
plot([a_1.*cos(theta_1_last) a_1.*cos(theta_1_last)+(a_2.*cos(theta_1_last+theta_2_last))], ...
    [a_1.*sin(theta_1_last) a_1.*sin(theta_1_last)+(a_2.*sin(theta_1_last+theta_2_last))])


colors = ["r"; "g"; "c"; "m"; "y"];

theta_1_data = [];
theta_2_data = [];
vel_1_data = [];
vel_2_data = [];
pos_x_data = [];
pos_y_data = [];
%%
for i = 1:size(points,1)
    x = points(i,1);
    y = points(i,2);
    % Calculate reference angles, elbow down
    % theta_2 = atan(sqrt( ...
    %    ((a_1^2 + a_2^2)^2 - (x^2+y^2))/((x^2+y^2)-((a_1^2-a_2^2)^2))));
    theta_2 = acos((x^2+y^2-a_1^2-a_2^2)/(2.*a_1.*a_2));
    phi = atan2(y,x);
    psi = atan2(a_2 .* sin(theta_2), a_1 + a_2 .* cos(theta_2));
    
    theta_1 = phi - psi;
    disp("theta_1 = " + theta_1 + ", theta_2 = " + theta_2)
    if(theta_1 > pi/2 || theta_1 < 0)
        theta_2 = -acos((x^2+y^2-a_1^2-a_2^2)/(2.*a_1.*a_2));
        psi = atan2(a_2 .* sin(theta_2), a_1 + a_2 .* cos(theta_2));
        theta_1 = phi - psi;
    end

    t0 = i.*2 - 2;
    tf = t0 + 2;
    Q = [1 t0 t0.^2 t0.^3;
        0 1 2.*t0 3.*t0.^2
        1 tf tf.^2 tf.^3
        0 1 2.*tf 3.*tf.^2];
    final_1 = [theta_1_last; 0; theta_1; 0];
    final_2 = [theta_2_last; 0; theta_2;0];
    % Update the last angles for the next iteration
    theta_1_last = theta_1;
    theta_2_last = theta_2;
    % Perform cubic interpolation for the angles
    coeffs_1 = Q \ final_1;
    coeffs_2 = Q \ final_2;
    q_theta_1 = @(t) coeffs_1(1) + coeffs_1(2).*t + coeffs_1(3).*t.^2 + coeffs_1(4).*t.^3;
    q_theta_2 = @(t) coeffs_2(1) + coeffs_2(2).*t + coeffs_2(3).*t.^2 + coeffs_2(4).*t.^3;
    v_theta_1 = @(t) coeffs_1(2) + 2.*coeffs_1(3).*t + 3.*coeffs_1(4).*t.^2;
    v_theta_2 = @(t) coeffs_2(2) + 2.*coeffs_2(3).*t + 3.*coeffs_2(4).*t.^2;
    % End effector position
    tool_pos_x = @(t) (a_1 .* cos(q_theta_1(t)) + a_2 .* cos(q_theta_1(t)+q_theta_2(t)));
    tool_pos_y = @(t) (a_1 .* sin(q_theta_1(t)) + a_2 .* sin(q_theta_1(t)+q_theta_2(t)));
    x_1 = linspace(t0,tf,1000);
    figure(3)
    plot(tool_pos_x(x_1), tool_pos_y(x_1), colors(i))
    plot(x,y, 'o', 'Color',colors(i))
    plot([0 a_1.*cos(theta_1)], [0 a_1.*sin(theta_1)], colors(i))
    plot([a_1.*cos(theta_1) (a_1.*cos(theta_1)+(a_2.*cos(theta_1+theta_2)))], ...
        [a_1.*sin(theta_1) (a_1.*sin(theta_1)+(a_2.*sin(theta_1+theta_2)))], colors(i))

    theta_1_data = [theta_1_data q_theta_1(x_1)];
    theta_2_data = [theta_2_data q_theta_2(x_1)];
    vel_1_data = [vel_1_data v_theta_1(x_1)];
    vel_2_data = [vel_2_data v_theta_2(x_1)];
end
x_T = linspace(0,size(points,1).*2,1000.*size(points,1));
figure(1)
plot(x_T,theta_1_data,'Color',"c")
plot(x_T,theta_1_data(x_1),'Color',"g")
figure(2)
plot(x_T,v_theta_1(x_1),'Color',"c")
plot(x_T,v_theta_2(x_1),'Color',"g")
